
@{
    ViewData["Title"] = "Index";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Kendo UI Snippet</title>

    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2022.2.802/styles/kendo.default-v2.min.css" />

    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2022.2.802/js/kendo.all.min.js"></script>
</head>
<body>

    <div id="grid"></div>
    <script>
        $("#grid").kendoGrid({
            columns: [
                {
                    field: "ProductID",
                    title: "کد کالا"
                },
                {
                    field: "ProductName",
                    title: "نام کالا"
                },
                {
                    field: "Stock",
                    title: "موجودی"
                },
                { command: "destroy", title: "Delete", width: "110px" }
            ],
            toolbar: ["create", "save", "cancel"],
            editable: true,
            sortable: true,
            filterable: true,
            pageable: true,
            dataSource: {
                transport: {
                    read: function (options) {
                        $.ajax({
                            url: "@Url.Action("LoadData", "Home")",
                            success: function (result) {
                                // notify the data source that the request succeeded
                                options.success(result);
                                console.log(result)
                            },
                            error: function (result) {
                                // notify the data source that the request failed
                                options.error(result);
                            }
                        });
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        model: {
                            storeID: "storeID",
                            fields: {
                                productsId: {
                                    editable: false,
                                    nullable: false,
                                    type: "int"
                                },
                                productName: {
                                    type: "string",
                                    validation: { required: true }
                                },
                                stock: {
                                    type: "int",
                                    validation: { required: true }
                                },
                            }
                        }
                    },

                },
            },
            saveChanges: function (options) {

                if (options.sender._data[0].storeID == null) {
                    product = new Object();
                    product.productsId = options.sender._data[0].productsId;
                    product.ProductName = options.sender._data[0].productName;
                    product.stock = parseInt(options.sender._data[0].stock);
                    console.log(product);
                    addProduct(product);
                }
                else {
                    for (var i = 0; i < options.sender._data; i++) {
                        product = new Object();
                        product.productsId = options.sender._data[0].productsId;
                        product.ProductName = options.sender._data[0].productName;
                        product.stock = parseInt(options.sender._data[0].stock);
                        console.log(product);
                        productUpdate(product);
                    }
                }
            },
            save: function (e) {
                console.log(e)
                if (e.values.name !== "") {
                    // the user changed the name field
                    if (e.values.name !== e.model.name) {
                        /* The result can be observed in the DevTools(F12) console of the browser. */
                        console.log("name is modified");
                    }
                } else {
                    e.preventDefault();
                    /* The result can be observed in the DevTools(F12) console of the browser. */
                    console.log("name cannot be empty");
                }
            },
            remove: function (e) {
                var id = e.model.productsId;
                console.log(id);
                productDelete(id);
            }

        });

        function productDelete(id) {
            $.ajax({
                url: "Home/DeleteProduct/" + id,
                type: 'DELETE',
            });
        }
        function addProduct(product) {
            console.log(product);

            $.ajax({
                url: "Home/Create",
                type: 'POST',
                data: product,
            });
        }
        function productUpdate(product) {
            $.ajax({
                url: "Home/EditProduct",
                type: 'PUT',
                data: product,
            });
        }
    </script>
</body>
</html>